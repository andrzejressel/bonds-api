import os
import unittest

import numpy as np
import pandas as pd

from tables_extractor import extract_tables_from_pdf

THIS_DIR = os.path.dirname(os.path.abspath(__file__))

class MyTestCase(unittest.TestCase):
    def test_type1_firstmonth(self):
        columns = ['06-2018', '07-2018', '08-2018', '09-2018', '10-2018', '11-2018',
                   '12-2018', '01-2019', '02-2019', '03-2019', '04-2019', '05-2019', '06-2019']

        # Define the data for each row
        data = [
            [0.00, 0.22, 0.45, 0.68, 0.90, 1.13, 1.35, 1.58, 1.81, 2.02, 2.25, 2.47, 2.70],
            [0.01, 0.23, 0.46, 0.69, 0.91, 1.14, 1.36, 1.59, 1.82, 2.03, 2.26, 2.48, np.nan],
            [0.01, 0.24, 0.47, 0.70, 0.92, 1.15, 1.37, 1.60, 1.83, 2.03, 2.26, 2.49, np.nan],
            [0.02, 0.24, 0.47, 0.70, 0.92, 1.15, 1.38, 1.61, 1.83, 2.04, 2.27, 2.49, np.nan],
            [0.03, 0.25, 0.48, 0.71, 0.93, 1.16, 1.38, 1.61, 1.84, 2.05, 2.28, 2.50, np.nan],
            [0.04, 0.26, 0.49, 0.72, 0.94, 1.17, 1.39, 1.62, 1.85, 2.06, 2.29, 2.51, np.nan],
            [0.04, 0.27, 0.50, 0.72, 0.95, 1.18, 1.40, 1.63, 1.86, 2.06, 2.29, 2.52, np.nan],
            [0.05, 0.27, 0.50, 0.73, 0.95, 1.18, 1.41, 1.63, 1.86, 2.07, 2.30, 2.52, np.nan],
            [0.06, 0.28, 0.51, 0.74, 0.96, 1.19, 1.41, 1.64, 1.87, 2.08, 2.31, 2.53, np.nan],
            [0.07, 0.29, 0.52, 0.75, 0.97, 1.20, 1.42, 1.65, 1.88, 2.09, 2.32, 2.54, np.nan],
            [0.07, 0.30, 0.53, 0.75, 0.98, 1.21, 1.43, 1.66, 1.89, 2.09, 2.32, 2.54, np.nan],
            [0.08, 0.30, 0.53, 0.76, 0.98, 1.21, 1.44, 1.66, 1.89, 2.10, 2.33, 2.55, np.nan],
            [0.09, 0.31, 0.54, 0.77, 0.99, 1.22, 1.44, 1.67, 1.90, 2.11, 2.34, 2.56, np.nan],
            [0.10, 0.32, 0.55, 0.78, 1.00, 1.23, 1.45, 1.68, 1.91, 2.12, 2.34, 2.57, np.nan],
            [0.10, 0.33, 0.55, 0.78, 1.01, 1.24, 1.46, 1.69, 1.92, 2.12, 2.35, 2.57, np.nan],
            [0.11, 0.33, 0.56, 0.79, 1.01, 1.24, 1.46, 1.69, 1.92, 2.13, 2.36, 2.58, np.nan],
            [0.12, 0.34, 0.57, 0.80, 1.02, 1.25, 1.47, 1.70, 1.93, 2.14, 2.37, 2.59, np.nan],
            [0.13, 0.35, 0.58, 0.81, 1.03, 1.26, 1.48, 1.71, 1.94, 2.15, 2.37, 2.60, np.nan],
            [0.13, 0.36, 0.58, 0.81, 1.04, 1.26, 1.49, 1.72, 1.95, 2.15, 2.38, 2.60, np.nan],
            [0.14, 0.36, 0.59, 0.82, 1.04, 1.27, 1.49, 1.72, 1.95, 2.16, 2.39, 2.61, np.nan],
            [0.15, 0.37, 0.60, 0.83, 1.05, 1.28, 1.50, 1.73, 1.96, 2.17, 2.40, 2.62, np.nan],
            [0.16, 0.38, 0.61, 0.84, 1.06, 1.29, 1.51, 1.74, 1.97, 2.17, 2.40, 2.63, np.nan],
            [0.16, 0.38, 0.61, 0.84, 1.07, 1.29, 1.52, 1.75, 1.98, 2.18, 2.41, 2.63, np.nan],
            [0.17, 0.39, 0.62, 0.85, 1.07, 1.30, 1.52, 1.75, 1.98, 2.19, 2.42, 2.64, np.nan],
            [0.18, 0.40, 0.63, 0.86, 1.08, 1.31, 1.53, 1.76, 1.99, 2.20, 2.43, 2.65, np.nan],
            [0.18, 0.41, 0.64, 0.87, 1.09, 1.32, 1.54, 1.77, 2.00, 2.20, 2.43, 2.66, np.nan],
            [0.19, 0.41, 0.64, 0.87, 1.09, 1.32, 1.55, 1.78, 2.00, 2.21, 2.44, 2.66, np.nan],
            [0.20, 0.42, 0.65, 0.88, 1.10, 1.33, 1.55, 1.78, 2.01, 2.22, 2.45, 2.67, np.nan],
            [0.21, 0.43, 0.66, 0.89, 1.11, 1.34, 1.56, 1.79, np.nan, 2.23, 2.46, 2.68, np.nan],
            [0.21, 0.44, 0.67, 0.90, 1.12, 1.35, 1.57, 1.80, np.nan, 2.23, 2.46, 2.69, np.nan],
            [np.nan, 0.44, 0.67, np.nan, 1.12, np.nan, 1.58, 1.80, np.nan, 2.24, np.nan, 2.69, np.nan]
        ]

        # Create DataFrame
        expected = pd.DataFrame(data, columns=columns, index=range(1, 32))

        # extract_tables_from_pdf("../output/tabela_odsetkowa_16931.pdf")

        actual = extract_tables_from_pdf(f"{THIS_DIR}/data/type1/tabela_odsetkowa_16866.pdf")

        pd.testing.assert_frame_equal(expected, actual)

    def test_type1_nonfirstmonth(self):
        columns = ['06-2019', '07-2019', '08-2019', '09-2019', '10-2019', '11-2019',
                   '12-2019', '01-2020', '02-2020', '03-2020', '04-2020', '05-2020', '06-2020']

        # Define the data for each row
        data = [
            [np.nan, 3.01, 3.33, 3.66, 3.97, 4.29, 4.60, 4.92, 5.24, 5.54, 5.87, 6.18, 6.50000],
            [2.71, 3.02, 3.34, 3.67, 3.98, 4.30, 4.61, 4.93, 5.25, 5.56, 5.88, 6.19, np.nan],
            [2.72, 3.03, 3.35, 3.68, 3.99, 4.31, 4.62, 4.94, 5.26, 5.57, 5.89, 6.20, np.nan],
            [2.73, 3.04, 3.36, 3.69, 4.00, 4.32, 4.63, 4.95, 5.27, 5.58, 5.90, 6.21, np.nan],
            [2.74, 3.05, 3.37, 3.70, 4.01, 4.33, 4.64, 4.96, 5.29, 5.59, 5.91, 6.22, np.nan],
            [2.75, 3.06, 3.39, 3.71, 4.02, 4.34, 4.65, 4.97, 5.30, 5.60, 5.92, 6.23, np.nan],
            [2.76, 3.07, 3.40, 3.72, 4.03, 4.35, 4.66, 4.98, 5.31, 5.61, 5.93, 6.24, np.nan],
            [2.77, 3.08, 3.41, 3.73, 4.04, 4.36, 4.67, 4.99, 5.32, 5.62, 5.94, 6.25, np.nan],
            [2.78, 3.09, 3.42, 3.74, 4.05, 4.37, 4.68, 5.00, 5.33, 5.63, 5.95, 6.26, np.nan],
            [2.79, 3.10, 3.43, 3.75, 4.06, 4.38, 4.69, 5.02, 5.34, 5.64, 5.96, 6.27, np.nan],
            [2.80, 3.12, 3.44, 3.76, 4.07, 4.39, 4.70, 5.03, 5.35, 5.65, 5.97, 6.28, np.nan],
            [2.81, 3.13, 3.45, 3.77, 4.08, 4.40, 4.71, 5.04, 5.36, 5.66, 5.98, 6.29, np.nan],
            [2.82, 3.14, 3.46, 3.78, 4.09, 4.41, 4.72, 5.05, 5.37, 5.67, 5.99, 6.30, np.nan],
            [2.83, 3.15, 3.47, 3.79, 4.10, 4.42, 4.73, 5.06, 5.38, 5.68, 6.00, 6.31, np.nan],
            [2.85, 3.16, 3.48, 3.80, 4.11, 4.43, 4.75, 5.07, 5.39, 5.69, 6.01, 6.32, np.nan],
            [2.86, 3.17, 3.49, 3.81, 4.12, 4.44, 4.76, 5.08, 5.40, 5.70, 6.02, 6.33, np.nan],
            [2.87, 3.18, 3.50, 3.82, 4.13, 4.45, 4.77, 5.09, 5.41, 5.71, 6.03, 6.34, np.nan],
            [2.88, 3.19, 3.51, 3.83, 4.14, 4.46, 4.78, 5.10, 5.42, 5.72, 6.04, 6.35, np.nan],
            [2.89, 3.20, 3.52, 3.84, 4.15, 4.48, 4.79, 5.11, 5.43, 5.73, 6.05, 6.36, np.nan],
            [2.90, 3.21, 3.53, 3.85, 4.16, 4.49, 4.80, 5.12, 5.44, 5.74, 6.06, 6.38, np.nan],
            [2.91, 3.22, 3.54, 3.86, 4.17, 4.50, 4.81, 5.13, 5.45, 5.75, 6.07, 6.39, np.nan],
            [2.92, 3.23, 3.55, 3.87, 4.18, 4.51, 4.82, 5.14, 5.46, 5.76, 6.08, 6.40, np.nan],
            [2.93, 3.24, 3.56, 3.88, 4.20, 4.52, 4.83, 5.15, 5.47, 5.77, 6.09, 6.41, np.nan],
            [2.94, 3.25, 3.57, 3.89, 4.21, 4.53, 4.84, 5.16, 5.48, 5.78, 6.11, 6.42, np.nan],
            [2.95, 3.26, 3.58, 3.90, 4.22, 4.54, 4.85, 5.17, 5.49, 5.79, 6.12, 6.43, np.nan],
            [2.96, 3.27, 3.59, 3.91, 4.23, 4.55, 4.86, 5.18, 5.50, 5.80, 6.13, 6.44, np.nan],
            [2.97, 3.28, 3.60, 3.93, 4.24, 4.56, 4.87, 5.19, 5.51, 5.81, 6.14, 6.45, np.nan],
            [2.98, 3.29, 3.61, 3.94, 4.25, 4.57, 4.88, 5.20, 5.52, 5.83, 6.15, 6.46, np.nan],
            [2.99, 3.30, 3.62, 3.95, 4.26, 4.58, 4.89, 5.21, 5.53, 5.84, 6.16, 6.47, np.nan],
            [3.00, 3.31, 3.63, 3.96, 4.27, 4.59, 4.90, 5.22, np.nan, 5.85, 6.17, 6.48, np.nan],
            [np.nan, 3.32, 3.64, np.nan, 4.28, np.nan, 4.91, 5.23, np.nan, 5.86, np.nan, 6.49, np.nan]
        ]

        # Create DataFrame
        expected = pd.DataFrame(data, columns=columns, index=range(1, 32))

        actual = extract_tables_from_pdf(f"{THIS_DIR}/data/type1/tabela_odsetkowa_16867.pdf")

        pd.testing.assert_frame_equal(expected, actual)

    def test_type1_pazdzierni_test(self):
        # Define the data for each row
        data = {
            '09-2019': [0.00, 0.01, 0.01, 0.02, 0.03, 0.04, 0.04, 0.05, 0.06, 0.07, 0.07, 0.08, 0.09, 0.10, 0.10, 0.11,
                        0.12, 0.13, 0.13, 0.14, 0.15, 0.15, 0.16, 0.17, 0.18, 0.18, 0.19, 0.20, 0.21, 0.21, np.nan],
            '10-2019': [0.22, 0.23, 0.24, 0.24, 0.25, 0.26, 0.27, 0.27, 0.28, 0.29, 0.30, 0.30, 0.31, 0.32, 0.32, 0.33,
                        0.34, 0.35, 0.35, 0.36, 0.37, 0.38, 0.38, 0.39, 0.40, 0.41, 0.41, 0.42, 0.43, 0.44, 0.44],
            '11-2019': [0.45, 0.46, 0.46, 0.47, 0.48, 0.49, 0.49, 0.50, 0.51, 0.52, 0.52, 0.53, 0.54, 0.55, 0.55, 0.56,
                        0.57, 0.58, 0.58, 0.59, 0.60, 0.60, 0.61, 0.62, 0.63, 0.63, 0.64, 0.65, 0.66, 0.66, np.nan],
            '12-2019': [0.67, 0.68, 0.69, 0.69, 0.70, 0.71, 0.72, 0.72, 0.73, 0.74, 0.75, 0.75, 0.76, 0.77, 0.77, 0.78,
                        0.79, 0.80, 0.80, 0.81, 0.82, 0.83, 0.83, 0.84, 0.85, 0.86, 0.86, 0.87, 0.88, 0.89, 0.89],
            '01-2020': [0.90, 0.91, 0.91, 0.92, 0.93, 0.94, 0.94, 0.95, 0.96, 0.97, 0.97, 0.98, 0.99, 1.00, 1.00, 1.01,
                        1.02, 1.03, 1.03, 1.04, 1.05, 1.05, 1.06, 1.07, 1.08, 1.08, 1.09, 1.10, 1.11, 1.11, 1.12],
            '02-2020': [1.13, 1.14, 1.14, 1.15, 1.16, 1.17, 1.17, 1.18, 1.19, 1.20, 1.20, 1.21, 1.22, 1.22, 1.23, 1.24,
                        1.25, 1.25, 1.26, 1.27, 1.28, 1.28, 1.29, 1.30, 1.31, 1.31, 1.32, 1.33, 1.34, np.nan, np.nan],
            '03-2020': [1.34, 1.35, 1.36, 1.36, 1.37, 1.38, 1.39, 1.39, 1.40, 1.41, 1.42, 1.42, 1.43, 1.44, 1.45, 1.45,
                        1.46, 1.47, 1.48, 1.48, 1.49, 1.50, 1.50, 1.51, 1.52, 1.53, 1.53, 1.54, 1.55, 1.56, 1.56],
            '04-2020': [1.57, 1.58, 1.59, 1.59, 1.60, 1.61, 1.62, 1.62, 1.63, 1.64, 1.65, 1.65, 1.66, 1.67, 1.67, 1.68,
                        1.69, 1.70, 1.70, 1.71, 1.72, 1.73, 1.73, 1.74, 1.75, 1.76, 1.76, 1.77, 1.78, 1.79, np.nan],
            '05-2020': [1.79, 1.80, 1.81, 1.81, 1.82, 1.83, 1.84, 1.84, 1.85, 1.86, 1.87, 1.87, 1.88, 1.89, 1.90, 1.90,
                        1.91, 1.92, 1.93, 1.93, 1.94, 1.95, 1.95, 1.96, 1.97, 1.98, 1.98, 1.99, 2.00, 2.01, 2.01],
            '06-2020': [2.02, 2.03, 2.04, 2.04, 2.05, 2.06, 2.07, 2.07, 2.08, 2.09, 2.10, 2.10, 2.11, 2.12, 2.12, 2.13,
                        2.14, 2.15, 2.15, 2.16, 2.17, 2.18, 2.18, 2.19, 2.20, 2.21, 2.21, 2.22, 2.23, 2.24, np.nan],
            '07-2020': [2.24, 2.25, 2.26, 2.26, 2.27, 2.28, 2.29, 2.29, 2.30, 2.31, 2.32, 2.32, 2.33, 2.34, 2.35, 2.35,
                        2.36, 2.37, 2.38, 2.38, 2.39, 2.40, 2.40, 2.41, 2.42, 2.43, 2.43, 2.44, 2.45, 2.46, 2.46],
            '08-2020': [2.47, 2.48, 2.49, 2.49, 2.50, 2.51, 2.52, 2.52, 2.53, 2.54, 2.55, 2.55, 2.56, 2.57, 2.57, 2.58,
                        2.59, 2.60, 2.60, 2.61, 2.62, 2.63, 2.63, 2.64, 2.65, 2.66, 2.66, 2.67, 2.68, 2.69, 2.69],
            '09-2020': [2.70, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan]
        }

        self.perform_test_2(filename="data/type1/tabela_odsetkowa_16931.pdf", data=data)


    def test_type2_firstmonth(self):
        columns = ['06-2020', '07-2020', '08-2020', '09-2020', '10-2020', '11-2020',
                   '12-2020', '01-2021', '02-2021', '03-2021', '04-2021', '05-2021', '06-2021']

        # Define the data for each row (01-31)
        data = [
            [np.nan, 6.93, 7.37, 7.82, 8.24, 8.69, 9.12, 9.56, 10.00, 10.40, 10.85, 11.28, 11.72],
            [6.51, 6.94, 7.39, 7.83, 8.26, 8.70, 9.13, 9.57, 10.02, 10.42, 10.86, 11.29, np.nan],
            [6.53, 6.96, 7.40, 7.84, 8.27, 8.72, 9.14, 9.59, 10.03, 10.43, 10.87, 11.30, np.nan],
            [6.54, 6.97, 7.41, 7.86, 8.29, 8.73, 9.16, 9.60, 10.05, 10.45, 10.89, 11.32, np.nan],
            [6.56, 6.99, 7.43, 7.87, 8.30, 8.74, 9.17, 9.62, 10.06, 10.46, 10.90, 11.33, np.nan],
            [6.57, 7.00, 7.44, 7.89, 8.32, 8.76, 9.19, 9.63, 10.07, 10.47, 10.92, 11.35, np.nan],
            [6.59, 7.01, 7.46, 7.90, 8.33, 8.77, 9.20, 9.65, 10.09, 10.49, 10.93, 11.36, np.nan],
            [6.60, 7.03, 7.47, 7.92, 8.34, 8.79, 9.22, 9.66, 10.10, 10.50, 10.95, 11.38, np.nan],
            [6.61, 7.04, 7.49, 7.93, 8.36, 8.80, 9.23, 9.67, 10.12, 10.52, 10.96, 11.39, np.nan],
            [6.63, 7.06, 7.50, 7.94, 8.37, 8.82, 9.24, 9.69, 10.13, 10.53, 10.97, 11.40, np.nan],
            [6.64, 7.07, 7.52, 7.96, 8.39, 8.83, 9.26, 9.70, 10.15, 10.55, 10.99, 11.42, np.nan],
            [6.66, 7.09, 7.53, 7.97, 8.40, 8.84, 9.27, 9.72, 10.16, 10.56, 11.00, 11.43, np.nan],
            [6.67, 7.10, 7.54, 7.99, 8.42, 8.86, 9.29, 9.73, 10.17, 10.57, 11.02, 11.45, np.nan],
            [6.69, 7.11, 7.56, 8.00, 8.43, 8.87, 9.30, 9.75, 10.19, 10.59, 11.03, 11.46, np.nan],
            [6.70, 7.13, 7.57, 8.02, 8.44, 8.89, 9.32, 9.76, 10.20, 10.60, 11.05, 11.48, np.nan],
            [6.71, 7.14, 7.59, 8.03, 8.46, 8.90, 9.33, 9.77, 10.22, 10.62, 11.06, 11.49, np.nan],
            [6.73, 7.16, 7.60, 8.04, 8.47, 8.92, 9.35, 9.79, 10.23, 10.63, 11.08, 11.50, np.nan],
            [6.74, 7.17, 7.62, 8.06, 8.49, 8.93, 9.36, 9.80, 10.25, 10.65, 11.09, 11.52, np.nan],
            [6.76, 7.19, 7.63, 8.07, 8.50, 8.94, 9.37, 9.82, 10.26, 10.66, 11.10, 11.53, np.nan],
            [6.77, 7.20, 7.64, 8.09, 8.52, 8.96, 9.39, 9.83, 10.27, 10.67, 11.12, 11.55, np.nan],
            [6.79, 7.21, 7.66, 8.10, 8.53, 8.97, 9.40, 9.85, 10.29, 10.69, 11.13, 11.56, np.nan],
            [6.80, 7.23, 7.67, 8.12, 8.54, 8.99, 9.42, 9.86, 10.30, 10.70, 11.15, 11.58, np.nan],
            [6.81, 7.24, 7.69, 8.13, 8.56, 9.00, 9.43, 9.87, 10.32, 10.72, 11.16, 11.59, np.nan],
            [6.83, 7.26, 7.70, 8.14, 8.57, 9.02, 9.45, 9.89, 10.33, 10.73, 11.18, 11.60, np.nan],
            [6.84, 7.27, 7.72, 8.16, 8.59, 9.03, 9.46, 9.90, 10.35, 10.75, 11.19, 11.62, np.nan],
            [6.86, 7.29, 7.73, 8.17, 8.60, 9.04, 9.47, 9.92, 10.36, 10.76, 11.20, 11.63, np.nan],
            [6.87, 7.30, 7.74, 8.19, 8.62, 9.06, 9.49, 9.93, 10.37, 10.77, 11.22, 11.65, np.nan],
            [6.89, 7.31, 7.76, 8.20, 8.63, 9.07, 9.50, 9.95, 10.39, 10.79, 11.23, 11.66, np.nan],
            [6.90, 7.33, 7.77, 8.22, 8.64, 9.09, 9.52, 9.96, np.nan, 10.80, 11.25, 11.68, np.nan],
            [6.91, 7.34, 7.79, 8.23, 8.66, 9.10, 9.53, 9.97, np.nan, 10.82, 11.26, 11.69, np.nan],
            [np.nan, 7.36, 7.80, np.nan, 8.67, np.nan, 9.55, 9.99, np.nan, 10.83, np.nan, 11.70, np.nan]
        ]

        # Create DataFrame
        expected = pd.DataFrame(data, columns=columns, index=range(1, 32))

        actual = extract_tables_from_pdf(f"{THIS_DIR}/data/type2/tabela_odsetkowa_16868.pdf")

        pd.testing.assert_frame_equal(expected, actual)

    def test_type2_nonfirstmonth(self):
        # Define the data for each row (01-31)
        data = {
            '06-2020': [0.00, 0.00, 0.01, 0.01, 0.02, 0.02, 0.03, 0.03, 0.04, 0.04, 0.05, 0.05, 0.06, 0.06, 0.07, 0.07,
                        0.07, 0.08, 0.08, 0.09, 0.09, 0.10, 0.10, 0.11, 0.11, 0.12, 0.12, 0.13, 0.13, 0.14, np.nan],
            '07-2020': [0.14, 0.14, 0.15, 0.15, 0.16, 0.16, 0.17, 0.17, 0.18, 0.18, 0.19, 0.19, 0.20, 0.20, 0.20, 0.21,
                        0.21, 0.22, 0.22, 0.23, 0.23, 0.24, 0.24, 0.25, 0.25, 0.26, 0.26, 0.27, 0.27, 0.27, 0.28],
            '08-2020': [0.28, 0.29, 0.29, 0.30, 0.30, 0.31, 0.31, 0.32, 0.32, 0.33, 0.33, 0.34, 0.34, 0.34, 0.35, 0.35,
                        0.36, 0.36, 0.37, 0.37, 0.38, 0.38, 0.39, 0.39, 0.40, 0.40, 0.41, 0.41, 0.41, 0.42, 0.42],
            '09-2020': [0.43, 0.43, 0.44, 0.44, 0.45, 0.45, 0.46, 0.46, 0.47, 0.47, 0.48, 0.48, 0.48, 0.49, 0.49, 0.50,
                        0.50, 0.51, 0.51, 0.52, 0.52, 0.53, 0.53, 0.54, 0.54, 0.54, 0.55, 0.55, 0.56, 0.56, np.nan],
            '10-2020': [0.57, 0.57, 0.58, 0.58, 0.59, 0.59, 0.60, 0.60, 0.61, 0.61, 0.61, 0.62, 0.62, 0.63, 0.63, 0.64,
                        0.64, 0.65, 0.65, 0.66, 0.66, 0.67, 0.67, 0.68, 0.68, 0.68, 0.69, 0.69, 0.70, 0.70, 0.71],
            '11-2020': [0.71, 0.72, 0.72, 0.73, 0.73, 0.74, 0.74, 0.75, 0.75, 0.75, 0.76, 0.76, 0.77, 0.77, 0.78, 0.78,
                        0.79, 0.79, 0.80, 0.80, 0.81, 0.81, 0.82, 0.82, 0.82, 0.83, 0.83, 0.84, 0.84, 0.85, np.nan],
            '12-2020': [0.85, 0.86, 0.86, 0.87, 0.87, 0.88, 0.88, 0.88, 0.89, 0.89, 0.90, 0.90, 0.91, 0.91, 0.92, 0.92,
                        0.93, 0.93, 0.94, 0.94, 0.95, 0.95, 0.95, 0.96, 0.96, 0.97, 0.97, 0.98, 0.98, 0.99, 0.99],
            '01-2021': [1.00, 1.00, 1.01, 1.01, 1.02, 1.02, 1.02, 1.03, 1.03, 1.04, 1.04, 1.05, 1.05, 1.06, 1.06, 1.07,
                        1.07, 1.08, 1.08, 1.09, 1.09, 1.09, 1.10, 1.10, 1.11, 1.11, 1.12, 1.12, 1.13, 1.13, 1.14],
            '02-2021': [1.14, 1.15, 1.15, 1.16, 1.16, 1.16, 1.17, 1.17, 1.18, 1.18, 1.19, 1.19, 1.20, 1.20, 1.21, 1.21,
                        1.22, 1.22, 1.22, 1.23, 1.23, 1.24, 1.24, 1.25, 1.25, 1.26, 1.26, 1.27, np.nan, np.nan, np.nan],
            '03-2021': [1.27, 1.28, 1.28, 1.29, 1.29, 1.29, 1.30, 1.30, 1.31, 1.31, 1.32, 1.32, 1.33, 1.33, 1.34, 1.34,
                        1.35, 1.35, 1.36, 1.36, 1.36, 1.37, 1.37, 1.38, 1.38, 1.39, 1.39, 1.40, 1.40, 1.41, 1.41],
            '04-2021': [1.42, 1.42, 1.43, 1.43, 1.43, 1.44, 1.44, 1.45, 1.45, 1.46, 1.46, 1.47, 1.47, 1.48, 1.48, 1.49,
                        1.49, 1.50, 1.50, 1.50, 1.51, 1.51, 1.52, 1.52, 1.53, 1.53, 1.54, 1.54, 1.55, 1.55, np.nan],
            '05-2021': [1.56, 1.56, 1.56, 1.57, 1.57, 1.58, 1.58, 1.59, 1.59, 1.60, 1.60, 1.61, 1.61, 1.62, 1.62, 1.63,
                        1.63, 1.63, 1.64, 1.64, 1.65, 1.65, 1.66, 1.66, 1.67, 1.67, 1.68, 1.68, 1.69, 1.69, 1.70],
            '06-2021': [1.70, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan]
        }

        self.perform_test_2(filename="data/type2/tabela_odsetkowa_16957.pdf", data=data)

    def test_type3_firstmonth(self):
        data = {
            '06-2024': [0.00, 0.02, 0.04, 0.06, 0.07, 0.09, 0.11, 0.13, 0.15, 0.17, 0.19, 0.20, 0.22, 0.24, 0.26, 0.28,
                        0.30, 0.32, 0.34, 0.35, 0.37, 0.39, 0.41, 0.43, 0.45, 0.47, 0.48, 0.50, 0.52, 0.54, np.nan],
            '07-2024': [0.56, 0.58, 0.60, 0.61, 0.63, 0.65, 0.67, 0.69, 0.71, 0.73, 0.75, 0.76, 0.78, 0.80, 0.82, 0.84,
                        0.86, 0.88, 0.89, 0.91, 0.93, 0.95, 0.97, 0.99, 1.01, 1.02, 1.04, 1.06, 1.08, 1.10, 1.12],
            '08-2024': [1.14, 1.16, 1.17, 1.19, 1.21, 1.23, 1.25, 1.27, 1.29, 1.30, 1.32, 1.34, 1.36, 1.38, 1.40, 1.42,
                        1.43, 1.45, 1.47, 1.49, 1.51, 1.53, 1.55, 1.56, 1.58, 1.60, 1.62, 1.64, 1.66, 1.68, 1.70],
            '09-2024': [1.71, 1.73, 1.75, 1.77, 1.79, 1.81, 1.83, 1.84, 1.86, 1.88, 1.90, 1.92, 1.94, 1.96, 1.97, 1.99,
                        2.01, 2.03, 2.05, 2.07, 2.09, 2.11, 2.12, 2.14, 2.16, 2.18, 2.20, 2.22, 2.24, 2.25, np.nan],
            '10-2024': [2.27, 2.29, 2.31, 2.33, 2.35, 2.37, 2.38, 2.40, 2.42, 2.44, 2.46, 2.48, 2.50, 2.52, 2.53, 2.55,
                        2.57, 2.59, 2.61, 2.63, 2.65, 2.66, 2.68, 2.70, 2.72, 2.74, 2.76, 2.78, 2.79, 2.81, 2.83],
            '11-2024': [2.85, 2.87, 2.89, 2.91, 2.92, 2.94, 2.96, 2.98, 3.00, 3.02, 3.04, 3.06, 3.07, 3.09, 3.11, 3.13,
                        3.15, 3.17, 3.19, 3.20, 3.22, 3.24, 3.26, 3.28, 3.30, 3.32, 3.33, 3.35, 3.37, 3.39, np.nan],
            '12-2024': [3.41, 3.43, 3.45, 3.47, 3.48, 3.50, 3.52, 3.54, 3.56, 3.58, 3.60, 3.61, 3.63, 3.65, 3.67, 3.69,
                        3.71, 3.73, 3.74, 3.76, 3.78, 3.80, 3.82, 3.84, 3.86, 3.88, 3.89, 3.91, 3.93, 3.95, 3.97],
            '01-2025': [3.99, 4.01, 4.02, 4.04, 4.06, 4.08, 4.10, 4.12, 4.14, 4.15, 4.17, 4.19, 4.21, 4.23, 4.25, 4.27,
                        4.28, 4.30, 4.32, 4.34, 4.36, 4.38, 4.40, 4.42, 4.43, 4.45, 4.47, 4.49, 4.51, 4.53, 4.55],
            '02-2025': [4.56, 4.58, 4.60, 4.62, 4.64, 4.66, 4.68, 4.69, 4.71, 4.73, 4.75, 4.77, 4.79, 4.81, 4.83, 4.84,
                        4.86, 4.88, 4.90, 4.92, 4.94, 4.96, 4.97, 4.99, 5.01, 5.03, 5.05, 5.07, np.nan, np.nan, np.nan],
            '03-2025': [5.09, 5.10, 5.12, 5.14, 5.16, 5.18, 5.20, 5.22, 5.24, 5.25, 5.27, 5.29, 5.31, 5.33, 5.35, 5.37,
                        5.38, 5.40, 5.42, 5.44, 5.46, 5.48, 5.50, 5.51, 5.53, 5.55, 5.57, 5.59, 5.61, 5.63, 5.64],
            '04-2025': [5.66, 5.68, 5.70, 5.72, 5.74, 5.76, 5.78, 5.79, 5.81, 5.83, 5.85, 5.87, 5.89, 5.91, 5.92, 5.94,
                        5.96, 5.98, 6.00, 6.02, 6.04, 6.05, 6.07, 6.09, 6.11, 6.13, 6.15, 6.17, 6.19, 6.20, np.nan],
            '05-2025': [6.22, 6.24, 6.26, 6.28, 6.30, 6.32, 6.33, 6.35, 6.37, 6.39, 6.41, 6.43, 6.45, 6.46, 6.48, 6.50,
                        6.52, 6.54, 6.56, 6.58, 6.60, 6.61, 6.63, 6.65, 6.67, 6.69, 6.71, 6.73, 6.74, 6.76, 6.78],
            '06-2025': [6.80, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan]
        }
        self.perform_test_2(filename="data/type3/tabela_odsetkowa_20686.pdf", data=data)

    def test_type3_nonfirstmonth(self):
        data = {
            '06-2024': [np.nan, 56.45, 56.47, 56.49, 56.50, 56.52, 56.54, 56.55, 56.57, 56.59, 56.60, 56.62, 56.64,
                        56.65, 56.67, 56.69, 56.70, 56.72, 56.74, 56.75, 56.77, 56.79, 56.80, 56.82, 56.84, 56.86,
                        56.87, 56.89, 56.91, 56.92, np.nan],
            '07-2024': [56.94, 56.96, 56.97, 56.99, 57.01, 57.02, 57.04, 57.06, 57.07, 57.09, 57.11, 57.12, 57.14,
                        57.16, 57.17, 57.19, 57.21, 57.22, 57.24, 57.26, 57.27, 57.29, 57.31, 57.32, 57.34, 57.36,
                        57.37, 57.39, 57.41, 57.42, 57.44],
            '08-2024': [57.46, 57.47, 57.49, 57.51, 57.52, 57.54, 57.56, 57.57, 57.59, 57.61, 57.62, 57.64, 57.66,
                        57.67, 57.69, 57.71, 57.72, 57.74, 57.76, 57.77, 57.79, 57.81, 57.82, 57.84, 57.86, 57.87,
                        57.89, 57.91, 57.92, 57.94, 57.96],
            '09-2024': [57.98, 57.99, 58.01, 58.03, 58.04, 58.06, 58.08, 58.09, 58.11, 58.13, 58.14, 58.16, 58.18,
                        58.19, 58.21, 58.23, 58.24, 58.26, 58.28, 58.29, 58.31, 58.33, 58.34, 58.36, 58.38, 58.39,
                        58.41, 58.43, 58.44, 58.46, np.nan],
            '10-2024': [58.48, 58.49, 58.51, 58.53, 58.54, 58.56, 58.58, 58.59, 58.61, 58.63, 58.64, 58.66, 58.68,
                        58.69, 58.71, 58.73, 58.74, 58.76, 58.78, 58.79, 58.81, 58.83, 58.84, 58.86, 58.88, 58.89,
                        58.91, 58.93, 58.94, 58.96, 58.98],
            '11-2024': [58.99, 59.01, 59.03, 59.04, 59.06, 59.08, 59.09, 59.11, 59.13, 59.15, 59.16, 59.18, 59.20,
                        59.21, 59.23, 59.25, 59.26, 59.28, 59.30, 59.31, 59.33, 59.35, 59.36, 59.38, 59.40, 59.41,
                        59.43, 59.45, 59.46, 59.48, np.nan],
            '12-2024': [59.50, 59.51, 59.53, 59.55, 59.56, 59.58, 59.60, 59.61, 59.63, 59.65, 59.66, 59.68, 59.70,
                        59.71, 59.73, 59.75, 59.76, 59.78, 59.80, 59.81, 59.83, 59.85, 59.86, 59.88, 59.90, 59.91,
                        59.93, 59.95, 59.96, 59.98, 60.00],
            '01-2025': [60.01, 60.03, 60.05, 60.06, 60.08, 60.10, 60.11, 60.13, 60.15, 60.16, 60.18, 60.20, 60.21,
                        60.23, 60.25, 60.27, 60.28, 60.30, 60.32, 60.33, 60.35, 60.37, 60.38, 60.40, 60.42, 60.43,
                        60.45, 60.47, 60.48, 60.50, 60.52],
            '02-2025': [60.53, 60.55, 60.57, 60.58, 60.60, 60.62, 60.63, 60.65, 60.67, 60.68, 60.70, 60.72, 60.73,
                        60.75, 60.77, 60.78, 60.80, 60.82, 60.83, 60.85, 60.87, 60.88, 60.90, 60.92, 60.93, 60.95,
                        60.97, 60.98, np.nan, np.nan, np.nan],
            '03-2025': [61.00, 61.02, 61.03, 61.05, 61.07, 61.08, 61.10, 61.12, 61.13, 61.15, 61.17, 61.18, 61.20,
                        61.22, 61.23, 61.25, 61.27, 61.28, 61.30, 61.32, 61.33, 61.35, 61.37, 61.38, 61.40, 61.42,
                        61.44, 61.45, 61.47, 61.49, 61.50],
            '04-2025': [61.52, 61.54, 61.55, 61.57, 61.59, 61.60, 61.62, 61.64, 61.65, 61.67, 61.69, 61.70, 61.72,
                        61.74, 61.75, 61.77, 61.79, 61.80, 61.82, 61.84, 61.85, 61.87, 61.89, 61.90, 61.92, 61.94,
                        61.95, 61.97, 61.99, 62.00, np.nan],
            '05-2025': [62.02, 62.04, 62.05, 62.07, 62.09, 62.10, 62.12, 62.14, 62.15, 62.17, 62.19, 62.20, 62.22,
                        62.24, 62.25, 62.27, 62.29, 62.30, 62.32, 62.34, 62.35, 62.37, 62.39, 62.40, 62.42, 62.44,
                        62.45, 62.47, 62.49, 62.50, 62.52],
            '06-2025': [62.54, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan]
        }
        self.perform_test_2(filename="data/type3/tabela_odsetkowa_20572.pdf", data=data)

    def perform_test(self, column, data, filename):
        # Create DataFrame
        expected = pd.DataFrame(data, columns=column, index=range(1, 32))

        actual = extract_tables_from_pdf(filename)

        pd.testing.assert_frame_equal(expected, actual)

    def perform_test_2(self, filename, data):
        # Create DataFrame
        expected = pd.DataFrame(data, index=list(range(1, 32)))

        actual = extract_tables_from_pdf(filename)

        pd.testing.assert_frame_equal(expected, actual)


if __name__ == '__main__':
    unittest.main()
